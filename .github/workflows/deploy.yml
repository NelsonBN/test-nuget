name: 'Deploy'


on:
  push: # First pipeline to run when deploy a new version
    branches:
      - main
    paths:
      - "src/**" # Only run when exists changes in source code



env:
  SDK_VERSION: '6.0.301'
  PACKAGE_PATH: ./src/**/*.nupkg
  NUGET_SERVER: https://api.nuget.org/v3/index.json



jobs:

  deploy-nuget:
    name: "Deploy nuget"
    runs-on: 'ubuntu-latest'

    steps:
    - name: "Checkout"
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        persist-credentials: false

    - name: "Setup .NET"
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ env.SDK_VERSION }}

    - name: Semantic Release
      id: 'semantic-release'
      uses: cycjimmy/semantic-release-action@v2
      with:
        semantic_version: 19.0.3
        extra_plugins: |
          semantic-release-plugin-csproj
          @semantic-release/changelog
          @semantic-release/github
          @semantic-release/git
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: "Output version"
      run: echo "New version " . ${{ steps.semantic-release.outputs.new_release_version }}

    - name: "Restore dependencies"
      run: dotnet restore

    - name: "Build"
      run: dotnet build -c Release --no-restore -p:PackageVersion=${{ steps.semantic-release.outputs.new_release_version }} -p:Version==${{ steps.semantic-release.outputs.new_release_version }}

    - name: "Pack"
      run: dotnet pack -c Release --no-build -p:PackageVersion=${{ steps.semantic-release.outputs.new_release_version }} -p:Version==${{ steps.semantic-release.outputs.new_release_version }}

    - name: "Publish nuget"
      run: dotnet nuget push ${{ env.PACKAGE_PATH }} --api-key ${{ secrets.NUGET_TOKEN }} --source ${{ env.NUGET_SERVER }} --skip-duplicate
